"""Fixed JSONB to JSON or PostgreSQL JSONB support

Revision ID: 1061c09ceb97
Revises: 553ca36ad5bb
Create Date: 2024-11-28 21:14:10.556812

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "1061c09ceb97"
down_revision = "553ca36ad5bb"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("approvals")
    with op.batch_alter_table("event_analytics", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "sentiment_analysis",
                postgresql.JSONB(astext_type=sa.Text()),
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "descriptive_analysis",
                postgresql.JSONB(astext_type=sa.Text()),
                nullable=True,
            )
        )

    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.add_column(sa.Column("created_by", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("created_at", sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column("updated_at", sa.DateTime(), nullable=True))
        batch_op.create_foreign_key(None, "users", ["created_by"], ["id"])

    with op.batch_alter_table("guests", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("user_id", sa.Integer(), nullable=True)
        )  # Allow NULL for user_id initially
        batch_op.add_column(sa.Column("expiration_date", sa.TIMESTAMP(), nullable=True))
        batch_op.add_column(sa.Column("created_at", sa.DateTime(), nullable=True))
        batch_op.drop_constraint("guests_email_key", type_="unique")
        batch_op.create_foreign_key(None, "users", ["user_id"], ["id"])
        batch_op.drop_column("certificate")
        batch_op.drop_column("email")
        batch_op.drop_column("temporary_password")
        batch_op.drop_column("recognition_paper")

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.add_column(sa.Column("updated_at", sa.DateTime(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_column("updated_at")

    with op.batch_alter_table("guests", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "recognition_paper",
                sa.VARCHAR(length=200),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "temporary_password",
                sa.VARCHAR(length=200),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column(
                "email", sa.VARCHAR(length=120), autoincrement=False, nullable=False
            )
        )
        batch_op.add_column(
            sa.Column(
                "certificate",
                sa.VARCHAR(length=200),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.create_unique_constraint("guests_email_key", ["email"])
        batch_op.drop_column("created_at")
        batch_op.drop_column("expiration_date")
        batch_op.drop_column("user_id")

    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.drop_column("updated_at")
        batch_op.drop_column("created_at")
        batch_op.drop_column("created_by")

    with op.batch_alter_table("event_analytics", schema=None) as batch_op:
        batch_op.drop_column("descriptive_analysis")
        batch_op.drop_column("sentiment_analysis")

    op.create_table(
        "approvals",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("document_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("signatory_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("remarks", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["document_id"], ["documents.id"], name="approvals_document_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["signatory_id"], ["signatories.id"], name="approvals_signatory_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="approvals_pkey"),
    )
    # ### end Alembic commands ###
